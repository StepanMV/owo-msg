import random
import math

class Encryptor:
    def __init__(self):
        self.publicKey = []  # Initialize publicKey as needed
        self.privateKey = []  # Initialize privateKey as needed
        self.primes = [9456959, 9456961, 9456971, 9456977, 9456989, 9457009, 9457027, 9457031, 9457037, 9457067, 9457073, 9457109, 9457111, 9457121, 9457127, 9457171, 9457177, 9457181, 9457241, 9457243, 9457297, 9457313, 9457319, 9457333, 9457361, 9457367, 9457397, 9457411, 9457447, 9457489, 9457493, 9457507, 9457517, 9457537, 9457541, 9457561, 9457571, 9457619, 9457621, 9457631, 9457673, 9457709, 9457727, 9457739, 9457753, 9457781, 9457783, 9457843, 9457849, 9457859, 9457871, 9457891, 9457897, 9457901, 9457907, 9457913, 9457927, 9457939, 9457961, 9457963, 9457969, 9458021, 9458023, 9458041, 9458077, 9458093, 9458101, 9458107, 9458153, 9458159, 9458173, 9458191, 9458201, 9458209, 9458243, 9458261, 9458279, 9458287, 9458291, 9458299, 9458311, 9458357, 9458369, 9458377, 9458389, 9458411, 9458419, 9458473, 9458483, 9458507, 9458509, 9458513, 9458521, 9458531, 9458557, 9458563, 9458587, 9458621, 9458623, 9458633, 9458651, 9458663, 9458671, 9458707, 9458711, 9458723, 9458767, 9458777, 9458803, 9458849, 9458861, 9458887, 9458899, 9458909, 9458927, 9458983, 9458989, 9459007, 9459019, 9459041, 9459059, 9459071, 9459077, 9459091, 9459113, 9459119, 9459137, 9459143, 9459167, 9459179, 9459193, 9459199, 9459217, 9459221, 9459251, 9459277, 9459287, 9459299, 9459301, 9459337, 9459389, 9459403, 9459419, 9459421, 9459451, 9459487, 9459503, 9459517, 9459521, 9459523, 9459533, 9459551, 9459577, 9459589, 9459607, 9459629, 9459631, 9459661, 9459673, 9459677, 9459683, 9459689, 9459691, 9459707, 9459727, 9459733, 9459767, 9459781, 9459809, 9459823, 9459833, 9459839, 9459869, 9459881, 9459893, 9459907, 9459911, 9459937, 9459943, 9459949, 9459953, 9459959, 9460027, 9460037, 9460067, 9460079, 9460093, 9460117, 9460127, 9460141, 9460147, 9460151, 9460163, 9460249, 9460259, 9460267, 9460303, 9460331, 9460379, 9460391, 9460393, 9460397, 9460403, 9460411, 9460417, 9460439, 9460469, 9460471, 9460501, 9460511, 9460513, 9460543, 9460571, 9460573, 9460597, 9460609, 9460621, 9460631, 9460637, 9460639, 9460643, 9460657, 9460669, 9460681, 9460691, 9460697, 9460723, 9460733, 9460739, 9460741, 9460769, 9460799, 9460811, 9460813, 9460837, 9460849, 9460853, 9460861, 9460883, 9460897, 9460901, 9460909, 9460933, 9460939, 9460987, 9461017, 9461021, 9461033, 9461071, 9461093, 9461099, 9461113, 9461117, 9461131, 9461143, 9461149, 9461167, 9461171, 9461173, 9461191, 9461203, 9461209, 9461219, 9461237, 9461251, 9461269, 9461273, 9461281, 9461329, 9461339, 9461341, 9461359, 9461363, 9461369, 9461371, 9461383, 9461399, 9461407, 9461461, 9461467, 9461471, 9461497, 9461519, 9461521, 9461581, 9461597, 9461609, 9461623, 9461633, 9461651, 9461657, 9461663, 9461681, 9461723, 9461729, 9461773, 9461779, 9461783, 9461797, 9461819, 9461821, 9461827, 9461831, 9461833, 9461839, 9461861, 9461927, 9461929, 9461989, 9462017, 9462023, 9462029, 9462049, 9462073, 9462077, 9462097, 9462127, 9462139, 9462151, 9462157, 9462169, 9462191, 9462197, 9462199, 9462221, 9462227, 9462239, 9462263, 9462283, 9462287, 9462289, 9462311, 9462317, 9462359, 9462367, 9462373, 9462377, 9462379, 9462413, 9462419, 9462443, 9462457, 9462473, 9462487, 9462511, 9462517, 9462521, 9462539, 9462571, 9462577, 9462587, 9462599, 9462601, 9462619, 9462647, 9462689, 9462701, 9462707, 9462737, 9462743, 9462749, 9462751, 9462757, 9462769, 9462773, 9462793, 9462811, 9462823, 9462847, 9462877, 9462883, 9462889, 9462899, 9462907, 9462911, 9462953, 9462979, 9462989, 9463057, 9463061, 9463073, 9463109, 9463117, 9463123, 9463133, 9463141, 9463163, 9463171, 9463177, 9463213, 9463229, 9463241, 9463243, 9463247, 9463249, 9463253, 9463261, 9463283, 9463301, 9463303, 9463319, 9463343, 9463427, 9463429, 9463439, 9463469, 9463481, 9463507, 9463513, 9463567, 9463583, 9463589, 9463609, 9463631, 9463633, 9463639, 9463651, 9463693, 9463697, 9463703, 9463709, 9463717, 9463721, 9463739, 9463759, 9463789, 9463807, 9463813, 9463841, 9463877, 9463901, 9463921, 9463931, 9463933, 9463969, 9463973, 9463991, 9463997, 9464011, 9464023, 9464027, 9464047, 9464099, 9464111, 9464113, 9464123, 9464137, 9464149, 9464159, 9464173, 9464233, 9464239, 9464297, 9464327, 9464363, 9464381, 9464383, 9464417, 9464419, 9464423, 9464443, 9464449, 9464453, 9464467, 9464473, 9464479, 9464519, 9464537, 9464549, 9464551, 9464599, 9464633, 9464647, 9464659, 9464677, 9464681, 9464683, 9464713, 9464723, 9464729, 9464737, 9464743, 9464761, 9464783, 9464837, 9464849, 9464857, 9464863, 9464867, 9464879, 9464887, 9464893, 9464909, 9464941, 9464953, 9464999, 9465011, 9465017, 9465047, 9465067, 9465083, 9465089, 9465091, 9465103, 9465139, 9465151, 9465161, 9465221, 9465251, 9465263, 9465271, 9465293, 9465317, 9465329, 9465331, 9465347, 9465353, 9465359, 9465371, 9465409, 9465427, 9465457, 9465473, 9465479, 9465493, 9465497, 9465499, 9465503, 9465517, 9465527, 9465529, 9465539, 9465587, 9465593, 9465601, 9465613, 9465637, 9465661, 9465679, 9465683, 9465707, 9465721, 9465733, 9465749, 9465751, 9465763, 9465809, 9465829, 9465839, 9465871, 9465913, 9465917, 9465931, 9465979, 9466003, 9466007, 9466021, 9466027, 9466033, 9466069, 9466099, 9466103, 9466111, 9466139, 9466141, 9466147, 9466169, 9466187, 9466189, 9466207, 9466211, 9466213, 9466241, 9466243, 9466273, 9466309, 9466319, 9466337, 9466343, 9466361, 9466381, 9466393, 9466403, 9466423, 9466447, 9466451, 9466459, 9466517, 9466543, 9466553, 9466577, 9466591, 9466621, 9466657, 9466703, 9466711, 9466747, 9466753, 9466757, 9466763]

    def getRandomNumber(self, min, max):
        return random.randint(min, max)

    def getRandomPrime(self):
        return self.primes[random.randint(0, len(self.primes) - 1)]

    def reminderPower(self, base, power, mod):
        base %= mod
        if power > mod: power %= mod - 1
        result = 1
        while power > 0:
            if power % 2 == 1:
                result = (result * base) % mod
            base = (base * base) % mod
            power //= 2
        return result

    def euclidInverse(self, a, m):
        m0 = m
        x0, x1 = 0, 1
        if m == 1:
            return 0
        while a > 1:
            q = a // m
            t = m
            m = a % m
            a = t
            t = x0
            x0 = x1 - q * x0
            x1 = t
        if x1 < 0:
            x1 += m0
        return x1

    def euclidExtended(self, a, b):
        if b == 0:
            return 1, 0
        else:
            x, y = self.euclidExtended(b, a % b)
            return y, x - y * (a // b)

    def getGCD(self, a, b):
        if b == 0:
            return a
        return self.getGCD(b, a % b)

    def getCoprime(self, a):
        for i in range(a - 1, 1, -1):
            if self.getGCD(a, i) == 1:
                return i
        return 1

    def isPrime(self, a):
        b = int(math.sqrt(a))
        for i in range(2, b + 1):
            if a % i == 0:
                return False
        return True

    # можно передать чужой открытый ключ, чтобы шифровать по нему (по умлочанию шифрование по своему открытому ключу)
    def encrypt(self, input, publicKey=None):
        raise NotImplementedError("Encryptor.encrypt() not implemented")
    
    # расшифровка (по своему ключу)
    def decrypt(self, encrypted):
        raise NotImplementedError("Encryptor.decrypt() not implemented")
